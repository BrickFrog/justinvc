author: 
caption: Python for Finance Cookbook
completed: 
created: 20210930152208997
due: 202203261200
ivl: 15
medium: book
modified: 20220312105713066
rating: 
readstatus: partial
tags: Source Python Finance Public
title: PythonForFinanceCookbook
tmap.id: 4f04ed05-e41c-4d40-b9db-6b42fc3a9560
type: text/vnd.tiddlywiki
url: 
year: 2020

A Python cookbook for #Finance, seems to cover a lot of basic stuff, but there is a couple of things in here that might be of interest. Relatively new, published in 2020. Hopefully avoids any deprecated libraries.

Will try to keep notes of key insights here as I read, then break out longer sections into their own areas.

!! Chapter 1 - Financial Data and Preprocessing

Mentioned sources of data:

* [[Quandl]]
* [[Yahoo Finance]]
* [[Intrinio]]
* [[IEX Cloud]]
* [[Tiingo]]
* [[Alpha Vantage]]

The [[Pandas (Python)]] library can be used to get simple / log returns, using the .pct_change() method and [[numpy (Python)]]'s log method combined with a shift of 1 

There's also discussion of using the [[Consumer Price Index (CPI)]] using the percentage change and merging with stock data to account for inflation. (Asked onion - suggests [[Field propagations]] and [[Gauge Theory]])
 
[[Cufflinks (Python)]] apparently a Python package for building [[Plot.ly]] plots on top of [[Pandas (Python)]] dataframes.

[[Outliers]], the book used the standard 3-sigma deviation, but it mentions many other approaches, such as: [[Isolation Forest]], [[Hampel Filter]], [[Support Vector Machines]], [[z-score]] (similar to sigma/stdev)

Five Stylized Facts:

* Non-Gaussian distribution of returns - large negative returns occur more frequently than positive ones, and large (and small) returns occur more often than expected. - Look at histograms of returns, Q-Q plot of overlaying normal vs. returns + descriptive statistics ([[Jarque-Bera Test]])
* Volatility Clustering - plot returns in pandas
* Autocorrelation - autocorrelation plots
* Small/decreasing autocorrelation ins squared/absolute returns
* Leverage effect - moving standard deviation (panda rolling method) - 21 / 252 (monthly/yearly) windows, can also use the [[VIX  (CBOE Volatility Index)]], using the log of the returns / the volatility and fitting them in a simple linear regression 

!! Chapter 2 - Technical Analysis in Python

This chapters starts out mentioning candlestick charts, using cufflinks as a mechanism to plot them, which is standard affair.

Interestingly, it mentions a Python package which I hadn't heard of [[BacktraderPython]] for backtesting. Normally I see things mention zipline, which has essentially become defunct after Robinhood's acquisition of Quantopian. (See the specific subsection for code samples, the book seems to cover a generic class use case.) The book covers bolinger bands and RSI as inputs to the library. These are [[Technical Analysis]] using price/volume, etc. as a mechanism for trading.

Lastly, there's a discussion on using [[Dash (Python)]] / [[Ipywidgets (Python)]] to create dashboards using [[Cufflinks (Python)]]. Depending on your data sources you could make a chart based on technical analysis indicators that (may) be more cost effective than paid solutions.

!! Chapter 3 - Time Series Modeling

This chapter on its own probably doesn't offer as much compared to say Hyndman's book on time series, but skimming it to make sure there's no nuggets, and I figure the repetition always helps. 

Outside of the standard breakdowns for seasonal decomposition, they mention stationarity which is useful to remember, specifically, employing the following:

* [[Augmented Dickey-Fuller (ADF)]]
* [[Kwiatkowski-Phillips-Schmidt-Shin (KPSS)]]
* [[Phillips-Perron (PP)]]
* [[Osborn, Chui, Smith and Birchenhall (OCSB)]]
* [[Canova-Hansen (CH)]]
* [[Ljung-Box]]
* and plots for partial autocorrelation functions

And to solve for this we can:

* Differencing
	* Specifically, the book mentions that you could possibly use a higher order diff such as 12 if dealing with yearly seasonality
	* the [[pmdarima (Python)]] package has functions that employ statistical tests to determine how many times we should differentiate the series.
* Take natural log to make more linear
* Look into deflation (e.g. using the CPI against the data)
* Adjustment by modeling by using seasonal decompose and removing it, or numpy's .polyfit() to fit against the time series and subtract it out
* Another adjustment is the [[Box-Cox Transformation]] that combines different exponential transformation functions to make it more 'normal'

There is a discussion on [[Exponential Smoothing]] methods, specifically Simple Exponential Smoothing]] and Holt's Linear Trend Method, with is an extension of simple smoothing, adding a trend but no seasonality, there are extensions upon that, that add a dampening figure Ï†, normally between 0.8 and 0.98. Then, of course another extension, Holt-Winter's Seasonal Smoothing which adds a seasonal component.

There is a discussion on [[ARIMA]] class models, such that:

* AR (autoregressive) - uses relationship between observation and its lagged values, which, specifically in a financial context means that this tries to account for momentum and mean reversion
* I (integration) - differencing the original time series
* MA (moving average) - uses an observation and the white noise terms, trying to account for unpredictable shocks 

Extensions

* ARIMA(X) - adding an exogenous variable(s)
* S(ARIMA) - Extends ARIMA to account for seasonality (SARIMAX uses a different formulation, at least in Python(?) insofar as the state-space formulation, so might be different than vanilla ARIMA(1,1,1))

A weakness is their inability to capture volatility clustering that is commonly observed in financial assets.

For sake of simplicity - [[Model Performance Metrics]] to optimizes, mentions [[Akaike Information Criterion (AIC)]] -

!! Chapter 4 - Multi-Factor Models

This is where we start to run into things that I'm not (as) familiar with, either by doing it in my finance undergrad and forgetting (as I'm not really using in my current dayjob) or simply not encountering it. These are for so-called [[Factor Models]] to explain excess returns over the risk-free rate of a certain portfolio or asset.

The first, the popular one-factor model the [[Capital Asset Pricing Model (CAPM)]] - this model represents the relationship between the return on a risky asset and market risk. More complicated factor models are built on top of it.

The book uses both the covariance approach and the [[statsmodels (Python)]] package's linear regression to show the beta. Firstly, using the covariance and benchmark variance, dividing the two, vs. using an linear regression against the Asset as the y with the statsmodels OLS (with the risk-free as a constant added via sm.add_constant()). The main recipe uses the S&P 500 as the 'market', but notes:

* can use the 13 week T-Bill (^IRX) 
* Or can approximate risk-free rate using 3-Month Treasure Bill (SEcondary Market Rate) from the [[Federal Reserve Economic Data (FRED)]] database.

This leads into the [[Fama-French Three-Factor Model]], which is an expansion on the CAPM model by adding two additional factors. Those considered are:

* The market factor (MKT), measuring the exess return of the market, analogical to the CAPM
* The size factor (SMB - small minus big) which measures the excess returns of stocks with a small market cap over those with a large one
* The value factor (HML - high minus low) which measures the excess return of value stocks over growth stocks. (Value having high book-to-market ratio)

$$E(r_i) = r_f + \alpha + \beta_{mkt}(E(r_m) - r_f + \beta_{smb}SMB+\beta_{hml}HML$$

In the case of a statistically significant, non-zero intercept, the model might not evaluate the asset/portfolio return correctly. However, the authors stated that the three-factor model is "fairly correct", even when it is unable to pass the statistical test.

Location of French's website: http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F\_Research\_Data\_Factors\_CSV.zip

However, it appears also available in pandas datareader which would allow some pre-processing skipping

Additionally, four/five factor models are discussed:

* [[Carhart's Four-Factor model]]
* momentum factor (WML; Winners Minus Losers) - looking at excess returns of winner stocks over loser stocks in the past 12 months (https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/det_mom_factor.html)
* [[Fama-French Five-Factor Model]] - an extension that includes
	* Robust Minus Weak (RMW) - excess returns of companies with high profit margins over those with lower profits
	* Conservative Minus Aggressive (CMA) measures exess of returns of firms with low investment policies over investing more (conservative vs. aggressive)

!! Chapter 5 - Modeling Volatility with GARCH Class Models


