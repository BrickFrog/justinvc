caption: Packaging Python in 2021
completed: 20210622000000000
created: 20210622081437042
medium: youtube
modified: 20220106015454495
presenter: Jeremy Paige
readstatus: read
revision: 0
tags: PyCon2021 Source
title: PackagingPython2021
tmap.id: 562028d9-4e4f-4fc1-b5b6-ae997c7b6be4
url: https://www.youtube.com/watch?v=j8iXO5VErjw
year: 2021

* ''Summary'':
** Five years after the inception of pyproject.toml the Python packaging landscape is now richer than ever. Despite all the new choices when setting up a project, setup.py's roll is diminishing. Discover why it may soon be absent and what to use in its place.
* ''Thoughts'':
** There was a youtube comment that kind of mirrors my own thoughts, a lot of the talk was historical and most of the interesting bits were constrained to the last 5 minutes of the talk wrt moving to toml
* ''Notes'':
**  PEP-518
** build backend -> into wheel file, etc.
** build frontend -> provides requirements / clean work environment
** integration front-end (package manager?) - resolves dependencies
** evolution
*** disutils 2000 (deprecated 3.10 - not used anywhere in a decade, more or less)
*** setuptools (2004) - easy_install, reused setup.pu convention
*** pip (2008) - replaces easy_install, direct installs from github, abstraction of setuptools, etc.
*** pyproject.toml (2016)
** moving to pyproject.toml
*** stop invoking setup.py
*** implicit behavior from pip includes setuptools and wheel with setuptools.build_meta as the build-backend, setup.cfg for metadata